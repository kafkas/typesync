rules_version = '2';
service cloud.firestore {
  // typesync-start
  // Type Validators

  function isValidUserRole(data) {
    return ((data == 'owner') || (data == 'admin') || (data == 'member'));
  }

  function isValidWorkspaceInfo(data) {
    return (
    (data is map) &&
    (data.keys().hasOnly(['name', 'description'])) &&
    (data.name is string) &&
    (data.description is string)
    );
  }

  function isValidUser(data) {
    return (
    (data is map) &&
    (data.keys().hasOnly(['name', 'role', 'website_url', 'created_at'])) &&
    (data.name is string) &&
    isValidUserRole(data.role) &&
    ((data.website_url is string) || !('website_url' in data)) &&
    (data.created_at is timestamp)
    );
  }

  function isValidWorkspace(data) {
    return (
    (data is map) &&
    (data.keys().hasOnly(['info', 'metadata', 'created_at'])) &&
    isValidWorkspaceInfo(data.info) &&
    (
    (data.metadata is map) &&
    (data.metadata.keys().hasOnly(['field1', 'field2', 'field3'])) &&
    (data.metadata.field1 is float) &&
    (
    (data.metadata.field2 is map) &&
    (data.metadata.field2.keys().hasOnly(['nestedField1', 'nestedField2'])) &&
    (data.metadata.field2.nestedField1 is bool) &&
    (data.metadata.field2.nestedField2 is int)
    ) &&
    (data.metadata.field3 is string)
    ) &&
    (data.created_at is timestamp)
    );
  }

  // Read-only field validators

  function isReadonlyFieldAffectedForUser(prevData, nextData) {
    let readonlyFields = ['role', 'created_at'];
    let changedFields = nextData.diff(prevData).affectedKeys();
    return changedFields.hasAny(readonlyFields);
  }

  function isReadonlyFieldAffectedForWorkspaceInfo(prevData, nextData) {
    let readonlyFields = ['name'];
    let changedFields = nextData.diff(prevData).affectedKeys();
    return changedFields.hasAny(readonlyFields);
  }

  function isReadonlyFieldAffectedForWorkspace(prevData, nextData) {
    let readonlyFieldsForMetadataField2 = ['nestedField2'];
    return (
    isReadonlyFieldAffectedForWorkspaceInfo(prevData.info, nextData.info) ||
    nextData.metadata.diff(prevData.metadata).affectedKeys().hasAny(['field1']) ||
    nextData.metadata.field2.diff(prevData.metadata.field2).affectedKeys().hasAny(['nestedField2']) ||
    nextData.diff(prevData).affectedKeys().hasAny(['created_at'])
    )
  }
  // typesync-end

  match /databases/{database}/documents {
    match /users/{userId} {
      function isLegalUserUpdate() {
        return !isReadonlyFieldAffectedForUser(resource.data, request.resource.data) && isValidUser(request.resource.data);
      }

      allow read;
      allow create: if isValidUser(request.resource.data);
      allow update: if isLegalUserUpdate();
      allow delete: if false;
    }

    match /projects/{projectId} {
      allow read, create, update, delete;
    }
  }
}